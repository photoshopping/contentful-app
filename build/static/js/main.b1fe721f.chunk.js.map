{"version":3,"sources":["components/RepeatableReferenceField.tsx","index.tsx"],"names":["RepeatableReferenceField","props","fieldValue","sdk","field","getValue","initialRows","map","value","key","uuid","useState","rows","setRows","instanceParameters","parameters","instance","referenceKey","textKey","textLabel","contentTypes","split","useEffect","window","startAutoResizer","filter","row","name","length","referencedIds","space","getEntries","then","queryResult","populatedRows","resultForCurrentRow","items","entry","sys","id","pop","fields","title","sanitizedRows","sanitizedRow","setValue","onTextChanged","e","rowIndex","target","dataset","index","updatedRows","onDragEnd","result","destination","source","prevRows","Array","from","splice","removed","droppableId","provided","ref","innerRef","className","draggableId","draggableProps","dragHandleProps","style","userSelect","placeholder","data-index","onChange","width","svgHeight","numberOfLines","icon","onClick","passedRow","onDeleteButtonClicked","marginTop","marginBottom","buttonType","options","dialogs","selectMultipleEntries","selectedRows","rowData","catch","init","root","document","getElementById","location","locations","LOCATION_ENTRY_FIELD","component","forEach","componentLocationSetting","is","render"],"mappings":"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","file":"static/js/main.b1fe721f.chunk.js","sourcesContent":["// @ts-nocheck\nimport { React, useState, useEffect } from \"react\";\nimport {\n  Button,\n  EditorToolbarButton,\n  SkeletonBodyText,\n  SkeletonContainer,\n  TextInput,\n  Paragraph,\n  Card,\n} from \"@contentful/forma-36-react-components\";\nimport { FieldExtensionSDK } from \"contentful-ui-extensions-sdk\";\nimport { v4 as uuid } from \"uuid\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\ninterface FieldProps {\n  sdk: FieldExtensionSDK;\n}\n\nconst RepeatableReferenceField = (props: FieldProps) => {\n  const fieldValue = props.sdk.field.getValue();\n  const initialRows = fieldValue\n    ? fieldValue.map((value) => ({ ...value, key: uuid() }))\n    : [];\n  const [rows, setRows] = useState(initialRows);\n  const instanceParameters = props.sdk.parameters.instance;\n  const referenceKey = instanceParameters.referenceKey || \"id\";\n  const textKey = instanceParameters.textKey || \"text\";\n  const textLabel = instanceParameters.textLabel || \"Text\";\n  const contentTypes = instanceParameters.contentTypes\n    ? instanceParameters.contentTypes.split(/\\s*,\\s*/g)\n    : null;\n\n  // use contentful's builtin auto-resizer\n  useEffect(() => {\n    props.sdk.window.startAutoResizer();\n  });\n\n  // check for unresolved names and fetch them from contenful if neccessary\n  useEffect(() => {\n    const unpopulatedRows = rows.filter((row) => !row.name);\n    if (!unpopulatedRows.length) {\n      return;\n    }\n\n    const referencedIds = rows.map((row) => row[referenceKey]);\n    props.sdk.space\n      .getEntries({ \"sys.id[in]\": referencedIds })\n      .then((queryResult) => {\n        let populatedRows = rows.map((row) => {\n          const resultForCurrentRow = queryResult.items\n            .filter((entry) => entry.sys.id === row[referenceKey])\n            .pop();\n          return {\n            name: resultForCurrentRow\n              ? resultForCurrentRow.fields.title[\"en-US\"]\n              : \"\",\n            ...row,\n          };\n        });\n        setRows(populatedRows);\n      });\n  }, [rows, props.sdk.space, referenceKey]);\n\n  // update contentful field value whenever rows data changes\n  useEffect(() => {\n    const sanitizedRows = rows.map((row) => {\n      const sanitizedRow = {};\n      sanitizedRow[textKey] = row[textKey];\n      sanitizedRow[referenceKey] = row[referenceKey];\n      return sanitizedRow;\n    });\n    props.sdk.field.setValue(sanitizedRows);\n  }, [rows, props.sdk.field, referenceKey, textKey]);\n\n  // open entry selection dialog and append selected entries to the end of our list\n  const onAddButtonClicked = () => {\n    const options = {};\n    if (contentTypes) {\n      options.contentTypes = contentTypes;\n    }\n    props.sdk.dialogs\n      .selectMultipleEntries(options)\n      .then((selectedRows) => {\n        setRows([\n          ...rows,\n          ...selectedRows.map((row) => {\n            const rowData = {\n              key: uuid(),\n            };\n            rowData[textKey] = \"\";\n            rowData[referenceKey] = row.sys.id;\n            return rowData;\n          }),\n        ]);\n      })\n      .catch(() => {\n        /* do nothing */\n      });\n  };\n\n  // update ingredients with new amount\n  const onTextChanged = (e) => {\n    const rowIndex = e.target.dataset.index;\n    const updatedRows = [...rows];\n    updatedRows[rowIndex][textKey] = e.target.value;\n    setRows(updatedRows);\n  };\n\n  // remove ingredient from list\n  const onDeleteButtonClicked = (passedRow) => {\n    const updatedRows = rows.filter((row) => row !== passedRow);\n    setRows(updatedRows);\n  };\n\n  // Called when ingredient is re-ordered\n  const onDragEnd = (result) => {\n    if (!result.destination) return;\n    const { source, destination } = result;\n    setRows((prevRows) => {\n      const result = Array.from(prevRows);\n      const [removed] = result.splice(source.index, 1);\n      result.splice(destination.index, 0, removed);\n      return result;\n    });\n  };\n\n  return (\n    <section>\n      <div>\n        <DragDropContext onDragEnd={(result) => onDragEnd(result)}>\n          <Droppable droppableId=\"rows\">\n            {(provided) => {\n              return (\n                <div ref={provided.innerRef} className=\"rows\">\n                  {rows.map((row, index) => {\n                    return (\n                      <Draggable\n                        key={`${row.id}-${index}`}\n                        draggableId={`${row.id}-${index}`}\n                        index={index}\n                      >\n                        {(provided) => {\n                          return (\n                            <div\n                              key={row.key}\n                              {...provided.draggableProps}\n                              {...provided.dragHandleProps}\n                              ref={provided.innerRef}\n                              style={{\n                                userSelect: \"none\",\n                                ...provided.draggableProps.style,\n                              }}\n                            >\n                              <Card className=\"row\">\n                                <div>\n                                  <TextInput\n                                    value={row[textKey]}\n                                    placeholder={textLabel}\n                                    data-index={index}\n                                    onChange={onTextChanged}\n                                  ></TextInput>\n                                </div>\n                                <div style={{ width: \"200px\" }}>\n                                  {row.name ? (\n                                    <Paragraph>{row.name}</Paragraph>\n                                  ) : (\n                                    <SkeletonContainer svgHeight=\"20\">\n                                      <SkeletonBodyText numberOfLines=\"1\"></SkeletonBodyText>\n                                    </SkeletonContainer>\n                                  )}\n                                </div>\n                                <div className=\"delete\">\n                                  <EditorToolbarButton\n                                    icon=\"Delete\"\n                                    data-index={index}\n                                    onClick={() => onDeleteButtonClicked(row)}\n                                  ></EditorToolbarButton>\n                                </div>\n                              </Card>\n                            </div>\n                          );\n                        }}\n                      </Draggable>\n                    );\n                  })}\n                  {provided.placeholder}\n                </div>\n              );\n            }}\n          </Droppable>\n        </DragDropContext>\n      </div>\n      <div style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\n        <Button icon=\"Plus\" buttonType=\"naked\" onClick={onAddButtonClicked}>\n          Add\n        </Button>\n      </div>\n    </section>\n  );\n};\n\nexport default RepeatableReferenceField;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  FieldExtensionSDK,\n  BaseExtensionSDK,\n  init,\n  locations\n} from 'contentful-ui-extensions-sdk';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/forma-36-fcss/dist/styles.css';\nimport './index.css';\n\nimport RepeatableReferenceField from './components/RepeatableReferenceField';\n\nimport LocalhostWarning from './components/LocalhostWarning';\n\nif (process.env.NODE_ENV === 'development' && window.self === window.top) {\n  // You can remove this if block before deploying your app\n  const root = document.getElementById('root');\n  render(<LocalhostWarning />, root);\n} else {\n  init((sdk: BaseExtensionSDK) => {\n    const root = document.getElementById('root');\n\n    // All possible locations for your app\n    // Feel free to remove unused locations\n    // Dont forget to delete the file too :)\n    const ComponentLocationSettings = [\n      {\n        location: locations.LOCATION_ENTRY_FIELD,\n        component: <RepeatableReferenceField sdk={sdk as FieldExtensionSDK} />\n      },\n    ];\n\n    // Select a component depending on a location in which the app is rendered.\n    ComponentLocationSettings.forEach(componentLocationSetting => {\n      if (sdk.location.is(componentLocationSetting.location)) {\n        render(componentLocationSetting.component, root);\n      }\n    });\n  });\n}\n"],"sourceRoot":""}